apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    defaultConfig {
        applicationId "com.tanmaychordia.sugardaddy"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"

        multiDexEnabled true
    }

    dexOptions {
        incremental true
        javaMaxHeapSize "4g"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:23.0.1'
    compile 'com.google.android.gms:play-services:7.8.0'
    compile 'com.parse.bolts:bolts-android:1.4.0'
    compile 'com.parse:parse-android:1.13.0'

    compile 'com.squareup.retrofit2:retrofit:2.0.0-beta3'
    compile 'com.diogobernardino:williamchart:2.2'

    compile 'com.android.support:multidex:1.0.1'

    compile ('hound.android:hound-sdk:0.2.15@aar'){
        transitive=true
    }

    compile ('hound.android:phrasespotter:1.4.0'){
        transitive=true
    }
}

// To keep our houndify credentials out of source control, we pass them in as a properties file or as environmental variables.
repositories {
    maven {
        // The username and password for this repo is set below
        url 'https://houndify.com/maven/'
    }
}


// Be sure not to check in your Houndify username and password to your source control!
boolean propertyFileHasHoundifyUsername = true;
if (project.hasProperty("houndifyProperties")) {
    File propFile = file(houndifyProperties)
    if (propFile.exists()) {
        Properties p = new Properties()
        p.load(new FileInputStream(propFile))
        if ( p.username != null ) {
            propertyFileHasHoundifyUsername = true;
            println "Using " + houndifyProperties + " for houndify repo"
            setHoundifyMavenCredentials("alecwang97@gmail.com", "pennappsxiii")
        }
    }
    else {
        throw new FileNotFoundException("Unable to find houndifyMavenProperties file at " + signingProperties)
    }
}

if ( propertyFileHasHoundifyUsername == false && System.getenv("HOUNDIFY_USERNAME") != null && System.getenv("HOUNDIFY_PASSWORD")) {
    println "Using environmental variables for houndify repo"
    setHoundifyMavenCredentials(System.getenv("HOUNDIFY_USERNAME"), System.getenv("HOUNDIFY_PASSWORD"))
}
else if( propertyFileHasHoundifyUsername == false ){
    throw new IllegalStateException("You must specify the houndify repos credentials either in the houndify.properties file or as environmental variables")
}

// Sets the username and password for the houndify repository
def setHoundifyMavenCredentials(username, password) {
    for (repo in repositories) {
        if (repo.properties.url.toString().equals("https://houndify.com/maven/")) {
            repo.properties.credentials.username = username
            repo.properties.credentials.password = password
        }
    }
}

